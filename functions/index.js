
const functions = require("firebase-functions");
const admin = require("firebase-admin");
const logger = require("firebase-functions/logger");

// Initialize Firebase Admin SDK
try {
  admin.initializeApp();
} catch (e) {
  logger.warn(
    "Firebase Admin SDK already initialized or initialization failed:",
    e,
  );
}
const db = admin.firestore();

/**
 * Handles incoming affiliate postbacks to record conversions.
 *
 * Expected query parameters:
 * - sub_id (string): The unique click ID generated by our system
 *   (maps to Click.clickId).
 * - transaction_id (string): The order ID or transaction ID from the
 *   advertiser.
 * - amount (number): The sale amount of the transaction.
 * - currency (string, optional): The currency of the sale amount (e.g., "INR").
 * - status (string, optional): The status of the transaction from the
 *   advertiser.
 * - commission (number, optional): The commission amount, if provided by the
 *   network.
 */
exports.handlePostback = functions.https.onRequest(async (request, response) => {
  logger.info(
    "Postback received. Query:",
    request.query,
    "Body:",
    request.body,
  );

  // Extract parameters - try query first, then body for flexibility
  const clickId = request.query.sub_id || request.body.sub_id;
  const orderId = request.query.transaction_id || request.body.transaction_id;
  const saleAmountStr = request.query.amount || request.body.amount;
  const currency = request.query.currency || request.body.currency || "INR";
  const advertiserStatus = request.query.status || request.body.status;
  const commissionAmountStr =
    request.query.commission || request.body.commission;

  if (!clickId || !orderId || !saleAmountStr) {
    logger.error(
      "Missing required parameters: sub_id, transaction_id, or amount.",
      {clickId, orderId, saleAmountStr},
    );
    response
      .status(400)
      .send(
        "Error: Missing required parameters (sub_id, transaction_id, amount).",
      );
    return;
  }

  const saleAmount = parseFloat(saleAmountStr);
  if (isNaN(saleAmount)) {
    logger.error("Invalid sale amount:", saleAmountStr);
    response.status(400).send("Error: Invalid sale amount.");
    return;
  }

  let commissionAmount = null;
  if (commissionAmountStr) {
    commissionAmount = parseFloat(commissionAmountStr);
    if (isNaN(commissionAmount)) {
      logger.warn("Invalid commission amount provided:", commissionAmountStr);
      // Continue processing, commission is optional, reset to null if invalid
      commissionAmount = null;
    }
  }

  try {
    // Find the original click document using the clickId field
    const clicksRef = db.collection("clicks");
    const clickQuery = clicksRef.where("clickId", "==", clickId).limit(1);
    const clickQuerySnapshot = await clickQuery.get();

    if (clickQuerySnapshot.empty) {
      logger.warn("No matching click found for clickId (sub_id):", clickId);
      // For now, we record it as an unmatched_click conversion for later review.
      const unmatchedConversionData = {
        clickId: clickId, // Store the received clickId
        originalClickFirebaseId: null,
        userId: null, // Cannot determine user if click is not found
        storeId: null, // Cannot determine store if click is not found
        storeName: null,
        orderId: orderId,
        saleAmount: saleAmount,
        currency: currency,
        commissionAmount: commissionAmount || null,
        status: "unmatched_click", // Internal status
        advertiserStatus: advertiserStatus || null,
        timestamp: admin.firestore.FieldValue.serverTimestamp(),
        postbackData: request.query || request.body,
      };
      const unmatchedConvRef =
        await db.collection("conversions").add(unmatchedConversionData);
      logger.info(
        "Logged conversion with status 'unmatched_click'. Conversion ID:",
        unmatchedConvRef.id,
      );
      response
        .status(200)
        .send("Postback received (click not matched, logged for review).");
      return;
    }

    const clickDoc = clickQuerySnapshot.docs[0];
    const clickData = clickDoc.data();

    // Check if a conversion for this order ID from this store already exists
    const conversionsRef = db.collection("conversions");
    const existingConversionQuery = conversionsRef
      .where("orderId", "==", orderId)
      .where("storeId", "==", clickData.storeId)
      .limit(1);
    const existingConversionSnapshot = await existingConversionQuery.get();

    if (!existingConversionSnapshot.empty) {
      const existingConvId = existingConversionSnapshot.docs[0].id;
      const existingConvData = existingConversionSnapshot.docs[0].data();
      logger.warn(
        `Duplicate conversion attempt for orderId: ${orderId}, ` +
        `storeId: ${clickData.storeId}. Existing Conv ID: ${existingConvId}. ` +
        `Postback clickId: ${clickId}. ` +
        `Existing clickId in conversion: ${existingConvData.clickId}`,
      );
      response
        .status(200)
        .send(
          `Postback received (conversion for order ${orderId} ` +
          `already exists: ${existingConvId}).`,
        );
      return;
    }

    // Create new Conversion document
    const conversionData = {
      clickId: clickData.clickId,
      originalClickFirebaseId: clickDoc.id,
      userId: clickData.userId,
      storeId: clickData.storeId,
      storeName: clickData.storeName || null,
      orderId: orderId,
      saleAmount: saleAmount,
      currency: currency,
      commissionAmount: commissionAmount || null,
      status: "received",
      advertiserStatus: advertiserStatus || null,
      timestamp: admin.firestore.FieldValue.serverTimestamp(),
      postbackData: request.query || request.body,
      processingError: null,
    };

    const conversionRef = await db.collection("conversions").add(conversionData);
    logger.info(
      "Conversion document created successfully. Conversion ID:",
      conversionRef.id,
    );

    // Update the original Click document
    await clickDoc.ref.update({
      hasConversion: true,
      conversionId: conversionRef.id,
      updatedAt: admin.firestore.FieldValue.serverTimestamp(),
    });
    logger.info(
      "Click document updated successfully. Click Firestore ID:",
      clickDoc.id,
    );

    response.status(200).send("Postback processed successfully.");
  } catch (error) {
    logger.error("Error processing postback:", error, {
      clickId,
      orderId,
      saleAmount,
    });
    response.status(500).send("Error processing postback.");
  }
});
