rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- User Profiles ---
    match /users/{userId} {
      // Allow users to read/write their own profile
      allow read, update: if request.auth != null && request.auth.uid == userId;
      // Allow authenticated users to create their profile
      allow create: if request.auth != null;
      // Allow admins to read any profile (adjust rule based on your admin check)
      allow read: if isAdmin();
      // Allow admins to update any profile (e.g., disable accounts)
      allow update: if isAdmin();
    }

    // --- Stores ---
    match /stores/{storeId} {
      // Allow anyone to read store data (publicly visible)
      allow read: if true;
      // Allow only admins to create, update, or delete stores
      allow write: if isAdmin();
    }

    // --- Coupons ---
    match /coupons/{couponId} {
      // Allow anyone to read coupon data
      allow read: if true;
      // Allow only admins to write coupons
      allow write: if isAdmin();
    }

    // --- Categories ---
    match /categories/{categoryId} {
      // Allow anyone to read category data
      allow read: if true;
      // Allow only admins to write categories
      allow write: if isAdmin();
    }

     // --- Banners ---
     match /banners/{bannerId} {
       // Allow anyone to read banner data
       allow read: if true;
       // Allow only admins to write banners
       allow write: if isAdmin();
     }

    // --- Transactions ---
    match /transactions/{transactionId} {
      // Allow users to read their own transactions
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      // Allow admins to read any transaction
      allow read: if isAdmin();
      // Allow admins to update transaction status/notes (or potentially a backend service)
      allow update: if isAdmin();
      // Disallow client-side creation/deletion of transactions (should be done server-side/functions)
      allow create, delete: if false;
    }

     // --- Clicks ---
     match /clicks/{clickId} {
       // Allow users to read their own clicks
       allow read: if request.auth != null && resource.data.userId == request.auth.uid;
       // Allow server-side creation of clicks (if using server actions/functions)
       // Or allow logged-in users to create their own clicks if using client-side writes directly
       // Be cautious with client-side writes for sensitive data
       allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
       // Allow admins to read any click
       allow read: if isAdmin();
       // Disallow updates/deletes from client-side generally
       allow update, delete: if false;
     }


    // --- Payout Requests ---
    match /payoutRequests/{payoutId} {
      // Allow users to read their own payout requests
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      // Allow users to create their own payout requests
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Allow admins to read any payout request
      allow read: if isAdmin();
      // Allow admins to update payout requests (status, notes)
      allow update: if isAdmin();
      // Disallow client-side deletion
      allow delete: if false;
    }

    // --- Helper function to check for admin role ---
    // This assumes you store the role in the user's profile document
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}