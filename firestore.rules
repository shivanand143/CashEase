
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // USERS
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && request.resource.data.uid == request.auth.uid;

      allow update: if 
        // Admin can update anything
        isAdmin() ||
        // Owner can update specific fields
        (isOwner(userId) && 
          // Critical fields that user cannot change themselves
          request.resource.data.uid == resource.data.uid &&
          request.resource.data.email == resource.data.email &&
          request.resource.data.role == resource.data.role &&
          request.resource.data.isDisabled == resource.data.isDisabled &&
          request.resource.data.referralCode == resource.data.referralCode &&
          request.resource.data.referralCount == resource.data.referralCount &&
          request.resource.data.referralBonusEarned == resource.data.referralBonusEarned &&
          request.resource.data.pendingCashback == resource.data.pendingCashback && // Users can't change pending directly
          request.resource.data.lifetimeCashback == resource.data.lifetimeCashback && // Users can't change lifetime directly
          // Allow cashbackBalance update only if it's a decrement AND lastPayoutRequestAt is being updated (i.e., during a payout request)
          (
            (request.resource.data.cashbackBalance != resource.data.cashbackBalance && 
             request.resource.data.cashbackBalance < resource.data.cashbackBalance && // Must be a decrement
             request.resource.data.lastPayoutRequestAt != resource.data.lastPayoutRequestAt) ||
            (request.resource.data.cashbackBalance == resource.data.cashbackBalance) // Or balance isn't changing
          ) &&
          // Allow changes to these fields by owner
          (request.resource.data.displayName != resource.data.displayName ||
           request.resource.data.photoURL != resource.data.photoURL ||
           request.resource.data.payoutDetails != resource.data.payoutDetails ||
           request.resource.data.updatedAt != resource.data.updatedAt ||
           // Allow if only the fields above + balance for payout are changing
           (request.resource.data.cashbackBalance != resource.data.cashbackBalance || request.resource.data.lastPayoutRequestAt != resource.data.lastPayoutRequestAt)
          )
        );
      allow delete: if false; 
    }

    // STORES
    match /stores/{storeId} {
      allow read: if resource.data.isActive == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // PRODUCTS
    match /products/{productId} {
      allow read: if resource.data.isActive == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // COUPONS
    match /coupons/{couponId} {
      allow read: if resource.data.isActive == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // CATEGORIES
    match /categories/{categoryId} {
      allow read: if resource.data.isActive == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // BANNERS
    match /banners/{bannerId} {
      allow read: if resource.data.isActive == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // CLICKS
    // Anyone authenticated can create their own click record.
    // Users can read their own click records.
    // Admins can read any click records.
    match /clicks/{clickId} {
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.clickId == clickId; // Ensure clickId in data matches doc ID
      allow read: if (isOwner(resource.data.userId) && resource.data.userId != null) || isAdmin();
      allow update, delete: if isAdmin(); 
    }

    // CONVERSIONS (New collection for postbacks)
    // Typically only writable by a trusted backend process (Firebase Function with Admin SDK).
    // Admins can read for auditing. Users generally don't read this directly.
    match /conversions/{conversionId} {
      allow read: if isAdmin();
      // Create, update, delete should ideally be restricted to backend/admin SDK.
      // If Firebase Functions are used with default service account, they bypass these rules.
      // For direct client (admin panel for manual entry - less ideal for conversions):
      allow create, update, delete: if isAdmin(); 
    }

    // TRANSACTIONS
    // Admins can create/update/delete (e.g., manual entry, status changes).
    // Users can read their own transactions.
    // Backend functions (triggered by conversions) will create transactions.
    match /transactions/{transactionId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isAdmin(); // Or your Firebase Function
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // PAYOUTREQUESTS
    match /payoutRequests/{requestId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow update: if isAdmin(); // Only admins can update status, notes etc.
      allow delete: if isAdmin();
    }
  }
}

    