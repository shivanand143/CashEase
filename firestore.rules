
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users Collection
    match /users/{userId} {
      // User can read their own profile if they are authenticated and their UID matches the document ID.
      // Admins can read any profile.
      allow read: if (request.auth != null && request.auth.uid == userId) || isAdmin();

      // Authenticated users can create their own profile (on signup), uid must match.
      allow create: if isAuthenticated() && request.resource.data.uid == request.auth.uid;

      // Update rules:
      // - Admins can update any field.
      // - Users can update specific, non-critical fields on their own profile.
      // - Users can trigger a cashbackBalance decrement and lastPayoutRequestAt update only when making a payout.
      allow update: if isAdmin() || (
        isOwner(userId) &&
        request.resource.data.uid == resource.data.uid && // Cannot change UID
        request.resource.data.email == resource.data.email && // Cannot change email via this rule
        request.resource.data.role == resource.data.role && // Cannot change role
        request.resource.data.isDisabled == resource.data.isDisabled && // Cannot change disable status
        request.resource.data.referralCode == resource.data.referralCode &&
        request.resource.data.referralCount == resource.data.referralCount &&
        request.resource.data.referralBonusEarned == resource.data.referralBonusEarned &&
        request.resource.data.pendingCashback == resource.data.pendingCashback && // Cannot directly change pending cashback
        request.resource.data.lifetimeCashback == resource.data.lifetimeCashback && // Cannot directly change lifetime cashback
        // Allow update if only displayName, photoURL, payoutDetails, or updatedAt are changing
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'photoURL', 'payoutDetails', 'updatedAt']) ||
          // OR if making a payout request (balance decreases, lastPayoutRequestAt updates)
          (
            request.resource.data.cashbackBalance < resource.data.cashbackBalance && // Balance is decreasing
            request.resource.data.lastPayoutRequestAt != resource.data.lastPayoutRequestAt &&
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['cashbackBalance', 'lastPayoutRequestAt', 'payoutDetails', 'updatedAt'])
            // Ensure only these fields are changing during payout request balance update
          )
        )
      );
      allow delete: if false; // Prevent accidental/direct deletion
    }

    // Stores Collection
    match /stores/{storeId} {
      allow read: if resource.data.isActive == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // Products Collection
    match /products/{productId} {
      allow read: if resource.data.isActive == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // Coupons Collection
    match /coupons/{couponId} {
      allow read: if resource.data.isActive == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // Categories Collection
    match /categories/{categoryId} {
      allow read: if resource.data.isActive == true || isAdmin(); // Only active categories public
      allow create, update, delete: if isAdmin();
    }

    // Banners Collection
    match /banners/{bannerId} {
      allow read: if resource.data.isActive == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // Clicks Collection
    match /clicks/{clickId} {
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.clickId == clickId; // Ensure clickId in data matches doc ID
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow update, delete: if isAdmin();
    }

    // Conversions Collection (Created by Firebase Function, read by admin)
    match /conversions/{conversionId} {
      allow read: if isAdmin();
      // Writes should ideally be restricted to your Firebase Function's service account
      // For simplicity if functions run with admin, this is covered by isAdmin() check on write.
      // If function runs with less privilege, you'd need a more specific rule or use security tokens.
      allow create, update, delete: if isAdmin(); // Or a specific service account role
    }

    // Transactions Collection
    match /transactions/{transactionId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      // Transactions are created by Firebase Function or by Admin
      allow create: if isAdmin(); // Function (with admin privileges) or direct admin action
      // Status updates and notes by admin
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // PayoutRequests Collection
    match /payoutRequests/{requestId} {
      // User creates their own, and cashbackBalance must be sufficient (checked in code, can add rule too)
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow update: if isAdmin(); // Admin processes (approve/reject/pay)
      allow delete: if isAdmin();
    }
  }
}
