
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Allow read/write access to authenticated users for their own data
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
      // Admin can read/write any user doc (adjust rule based on how admin role is checked)
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Stores: Allow read for anyone, write only for admin
    match /stores/{storeId} {
      allow read: if true; // Allow anyone to read store info
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Coupons: Allow read for anyone, write only for admin
    match /coupons/{couponId} {
      allow read: if true; // Allow anyone to read coupon info
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Clicks: Allow create for authenticated users, read/delete only for admin (or potentially user for their own clicks)
    match /clicks/{clickId} {
       allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
       // Allow admin full access
       allow read, write, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
       // Optionally allow users to read their own clicks
       // allow read: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Transactions: Allow create by admin/functions, read only by the user and admin
     match /transactions/{transactionId} {
       // Assuming transactions are created server-side (e.g., via admin panel or functions)
       allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
       // Allow user to read their own transactions
       allow read: if request.auth != null && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
       // Allow admin to update/delete
       allow update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
     }

     // Payout Requests: Allow create/read by user, read/update/delete by admin
     match /payoutRequests/{payoutId} {
       allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
       allow read: if request.auth != null && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
       allow update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
     }

    // Default deny all other paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
