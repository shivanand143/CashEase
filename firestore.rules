rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if the user is an admin
    // Assumes user profile doc exists at /users/{userId} with a 'role' field
    // Use exists() for safety before accessing .data
    function isAdmin() {
      return isAuthenticated() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users collection:
    match /users/{userId} {
      // Allow authenticated users to read any profile (needed for referral code lookup, maybe tighten later)
      allow read: if isAuthenticated();
      // Allow user to create their own document ONLY
      allow create: if isAuthenticated() && isOwner(userId);
      // Allow user to update their own document, but NOT change their role unless they are admin
      allow update: if isAuthenticated() && isOwner(userId) &&
                     (request.resource.data.role == resource.data.role || isAdmin());
      // Admins can write/delete any user profile (use with caution)
      allow write: if isAdmin(); // Covers create, update, delete for admins
    }

    // Stores collection: Publicly readable, writable only by admins
    match /stores/{storeId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Coupons collection: Publicly readable, writable only by admins
    match /coupons/{couponId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Clicks collection:
    match /clicks/{clickId} {
      // Allow authenticated users to create their own click logs
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      // Allow admins to read all clicks (for analytics)
      allow read: if isAdmin();
      // Disallow update/delete by default from client
      allow update, delete: if false;
    }

    // Transactions collection:
    match /transactions/{transactionId} {
      // Allow owner or admin to read
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      // Ideally, disallow client writes. If needed for specific cases (e.g., affiliate network callback simulation),
      // restrict heavily or use Cloud Functions. Allowing admin write for now.
      allow write: if isAdmin();
      // Disallow direct client creation/update unless absolutely necessary and secured.
      // allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid; // Example if needed
    }

    // PayoutRequests collection:
    match /payoutRequests/{requestId} {
      // Allow user to create their own request
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      // Allow owner or admin to read
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      // Only Admins can update (approve/reject)
      allow update: if isAdmin();
      // Disallow delete by default
      allow delete: if false;
    }

    // Default deny all other paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
