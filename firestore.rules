rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users Collection
    // - Authenticated users can read their own profile.
    // - Admins can read any profile.
    // - Authenticated users can create their own profile (on signup).
    // - Authenticated users can update their own profile (specific fields).
    // - Admins can update any profile (e.g., disable account, change role).
    // - Deletion should likely be restricted (soft delete via 'isDisabled' field).
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && request.resource.data.uid == request.auth.uid;
      // Allow users to update specific fields (displayName, photoURL, payoutDetails, updatedAt)
      allow update: if (isOwner(userId) && request.resource.data.uid == resource.data.uid && !(request.resource.data.role != resource.data.role) && !(request.resource.data.isDisabled != resource.data.isDisabled)) || isAdmin();
      allow delete: if false; // Prevent accidental deletion
    }

    // Stores Collection
    // - Anyone can read active stores.
    // - Only admins can create, update, or delete stores.
    match /stores/{storeId} {
      allow read: if resource.data.isActive == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // Coupons Collection
    // - Anyone can read active coupons.
    // - Only admins can create, update, or delete coupons.
    match /coupons/{couponId} {
      allow read: if resource.data.isActive == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // Categories Collection
    // - Anyone can read categories.
    // - Only admins can create, update, or delete categories.
    match /categories/{categoryId} {
      allow read: if true; // Publicly readable
      allow create, update, delete: if isAdmin();
    }

    // Banners Collection
    // - Anyone can read active banners.
    // - Only admins can create, update, or delete banners.
    match /banners/{bannerId} {
      allow read: if resource.data.isActive == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // Clicks Collection
    // - Authenticated users can create their own click records.
    // - Authenticated users can read their own click records.
    // - Admins can read any click records.
    match /clicks/{clickId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow update, delete: if isAdmin(); // Admins might need to correct/delete clicks
    }

    // Transactions Collection
    // - Authenticated users can read their own transaction records.
    // - Admins can read any transaction records.
    // - Only admins (or backend functions) should create/update transactions.
    match /transactions/{transactionId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      // Creation should likely happen via backend/trusted environment after purchase validation
      allow create: if isAdmin(); // Or functions
      // Status updates typically done by admin or backend
      allow update: if isAdmin();
      allow delete: if isAdmin(); // Allow admin deletion if necessary
    }

    // PayoutRequests Collection
    // - Authenticated users can create their own payout requests.
    // - Authenticated users can read their own payout requests.
    // - Admins can read/update any payout request (to approve/reject/mark paid).
    match /payoutRequests/{requestId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read: if isOwner(resource.data.userId) || isAdmin();
      // Only admins can update the status, adminNotes, etc.
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}
