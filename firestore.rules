
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return isAuthenticated() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users Collection
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && request.resource.data.uid == request.auth.uid;
      // Users can update their own displayName, photoURL, and payoutDetails
      // Admins can update any field (role, isDisabled, balances through specific actions)
      allow update: if
        (isOwner(userId) &&
            request.resource.data.uid == resource.data.uid &&
            // Fields users are allowed to change directly:
            (
              (request.resource.data.displayName == resource.data.displayName || request.resource.data.displayName != null) &&
              (request.resource.data.photoURL == resource.data.photoURL || request.resource.data.photoURL != null) &&
              (request.resource.data.payoutDetails == resource.data.payoutDetails || request.resource.data.payoutDetails != null)
            ) &&
            // Fields users CANNOT change directly:
            request.resource.data.email == resource.data.email &&
            request.resource.data.role == resource.data.role &&
            request.resource.data.isDisabled == resource.data.isDisabled &&
            request.resource.data.cashbackBalance == resource.data.cashbackBalance &&
            request.resource.data.pendingCashback == resource.data.pendingCashback &&
            request.resource.data.lifetimeCashback == resource.data.lifetimeCashback &&
            request.resource.data.referralCode == resource.data.referralCode &&
            request.resource.data.referralCount == resource.data.referralCount &&
            request.resource.data.referralBonusEarned == resource.data.referralBonusEarned &&
            request.resource.data.referredBy == resource.data.referredBy &&
            request.resource.data.lastPayoutRequestAt == resource.data.lastPayoutRequestAt
        ) || isAdmin();
      allow delete: if false;
    }

    // Stores Collection
    match /stores/{storeId} {
      allow read: if resource.data.isActive == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // Coupons Collection
    match /coupons/{couponId} {
      allow read: if resource.data.isActive == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // Categories Collection
    match /categories/{categoryId} {
      allow read: if resource.data.isActive == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // Banners Collection
    match /banners/{bannerId} {
      allow read: if resource.data.isActive == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // Products Collection
    match /products/{productId} {
      allow read: if resource.data.isActive == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // Clicks Collection
    match /clicks/{clickId} {
      // userId must match auth.uid AND clickId in resource must match clickId in path
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.clickId == clickId;
      // User can read their own clicks, Admin can read all
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow update, delete: if isAdmin(); // Only admins can modify/delete
    }

    // Transactions Collection
    match /transactions/{transactionId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      // Admin or trusted backend for create/update
      allow create, update: if isAdmin();
      allow delete: if isAdmin();
    }

    // PayoutRequests Collection
    match /payoutRequests/{requestId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}
