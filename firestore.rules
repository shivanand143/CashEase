rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Utility function to check if user is admin
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    // Utility function to check if user owns the document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      // Allow read access to own profile or if admin
      allow read: if request.auth != null && (isOwner(userId) || isAdmin(request.auth.uid));

      // Allow creation of own profile during signup
      allow create: if request.auth != null && isOwner(userId);

      // Allow update of own profile fields (name, photo, payoutDetails)
      allow update: if request.auth != null && isOwner(userId) &&
                       request.resource.data.keys().hasOnly(['displayName', 'photoURL', 'payoutDetails', 'updatedAt']) ||
                       // Allow admin to update any user field (role, isDisabled, etc.)
                       (isAdmin(request.auth.uid));

      // Generally disallow direct deletion of user profiles
      allow delete: if false;
    }

    // Stores collection (publicly readable)
    match /stores/{storeId} {
      allow read: if true;
      // Allow write only by admin
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Coupons collection (publicly readable)
    match /coupons/{couponId} {
      allow read: if true;
      // Allow write only by admin
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Clicks collection
    match /clicks/{clickId} {
      // Allow authenticated users to create their own click logs
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Allow read only by owner or admin (for potential debugging)
      allow read: if request.auth != null && (isOwner(request.resource.data.userId) || isAdmin(request.auth.uid));
      // Generally disallow updates/deletes
      allow update, delete: if false;
    }

    // Transactions collection
    match /transactions/{transactionId} {
      // Allow read only by the user who owns the transaction or an admin
      allow read: if request.auth != null && (isOwner(resource.data.userId) || isAdmin(request.auth.uid));
      // Allow write (create/update) only by admin
      allow write: if request.auth != null && isAdmin(request.auth.uid);
      // Generally disallow direct deletion
      allow delete: if false;
    }

    // PayoutRequests collection
    match /payoutRequests/{requestId} {
      // Allow users to create their own payout requests
      allow create: if request.auth != null && isOwner(request.resource.data.userId);
      // Allow users to read their own requests
      // Allow admins to read all requests
      allow read: if request.auth != null && (isOwner(resource.data.userId) || isAdmin(request.auth.uid));
      // Allow admins to update requests (status, notes, processedAt)
      allow update: if request.auth != null && isAdmin(request.auth.uid);
      // Generally disallow deletion
      allow delete: if false;
    }

    // Allow read access to the special __database_metadata__ document if needed by libraries
    match /__database_metadata__/{doc=**} {
      allow read: if true;
    }
  }
}
