
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return isAuthenticated() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users Collection
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && request.resource.data.uid == request.auth.uid;
      // User can update: displayName, photoURL, payoutDetails, updatedAt
      // Admin can update: role, isDisabled, cashbackBalance, pendingCashback, lifetimeCashback
      allow update: if (isOwner(userId) &&
                        request.resource.data.uid == resource.data.uid &&
                        request.resource.data.email == resource.data.email && // email shouldn't change here
                        !(request.resource.data.role != resource.data.role) &&
                        !(request.resource.data.isDisabled != resource.data.isDisabled) &&
                        !(request.resource.data.cashbackBalance != resource.data.cashbackBalance) &&
                        !(request.resource.data.pendingCashback != resource.data.pendingCashback) &&
                        !(request.resource.data.lifetimeCashback != resource.data.lifetimeCashback)
                       ) || isAdmin();
      allow delete: if false; // Prevent direct deletion
    }

    // Stores Collection
    match /stores/{storeId} {
      allow read: if resource.data.isActive == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // Products Collection
    match /products/{productId} {
      allow read: if resource.data.isActive == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // Coupons Collection
    match /coupons/{couponId} {
      allow read: if resource.data.isActive == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // Categories Collection
    match /categories/{categoryId} {
      allow read: if resource.data.isActive == true || isAdmin(); // Only active categories are public
      allow create, update, delete: if isAdmin();
    }

    // Banners Collection
    match /banners/{bannerId} {
      allow read: if resource.data.isActive == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // Clicks Collection
    match /clicks/{clickId} {
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.clickId == clickId; // clickId in data must match doc ID
      allow read: if (isAuthenticated() && resource.data.userId == request.auth.uid) || isAdmin();
      // Clicks are generally immutable by users once created. Admin might update for status or corrections.
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Transactions Collection
    match /transactions/{transactionId} {
      allow read: if (isAuthenticated() && resource.data.userId == request.auth.uid) || isAdmin();
      // Transactions should only be created and fully managed by admins or trusted backend processes.
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // PayoutRequests Collection
    match /payoutRequests/{requestId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read: if (isAuthenticated() && resource.data.userId == request.auth.uid) || isAdmin();
      allow update: if isAdmin(); // Admins update status (approved, paid, rejected)
      allow delete: if isAdmin();
    }
  }
}
