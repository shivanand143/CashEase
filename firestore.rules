
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return isAuthenticated() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users Collection
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && request.resource.data.uid == request.auth.uid;

      // Users can update their displayName, photoURL, and payoutDetails.
      // They can also update their cashbackBalance (decrement only) and lastPayoutRequestAt
      // specifically when making a payout request.
      // Admins can update any field.
      allow update: if (
                      isOwner(userId) &&
                      // Fields users ARE allowed to change directly
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'photoURL', 'payoutDetails', 'updatedAt']) ||
                       (request.resource.data.diff(resource.data).affectedKeys().hasAll(['cashbackBalance', 'lastPayoutRequestAt', 'updatedAt']) && // Payout request specific update
                        request.resource.data.cashbackBalance < resource.data.cashbackBalance && // Ensure balance is being decremented
                        request.resource.data.diff(resource.data).affectedKeys().size() == 3 // Only these three fields are changing
                       )
                      ) &&
                      // Fields users are NOT allowed to change directly
                      request.resource.data.uid == resource.data.uid &&
                      request.resource.data.email == resource.data.email &&
                      request.resource.data.role == resource.data.role &&
                      request.resource.data.isDisabled == resource.data.isDisabled &&
                      request.resource.data.pendingCashback == resource.data.pendingCashback &&
                      request.resource.data.lifetimeCashback == resource.data.lifetimeCashback &&
                      request.resource.data.referralCode == resource.data.referralCode &&
                      request.resource.data.referralCount == resource.data.referralCount &&
                      request.resource.data.referralBonusEarned == resource.data.referralBonusEarned &&
                      request.resource.data.referredBy == resource.data.referredBy &&
                      request.resource.data.createdAt.toMillis() == resource.data.createdAt.toMillis() // Compare timestamps safely
                    ) || isAdmin();

      allow delete: if false; // Prevent accidental deletion
    }

    // Stores Collection
    match /stores/{storeId} {
      allow read: if resource.data.isActive == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // Products Collection
    match /products/{productId} {
      allow read: if resource.data.isActive == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // Coupons Collection
    match /coupons/{couponId} {
      allow read: if resource.data.isActive == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // Categories Collection
    match /categories/{categoryId} {
      allow read: if resource.data.isActive == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // Banners Collection
    match /banners/{bannerId} {
      allow read: if resource.data.isActive == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // Clicks Collection
    match /clicks/{clickId} {
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.clickId == clickId; // Ensure clickId in data matches doc ID
      allow read: if (isOwner(resource.data.userId)
                      // Optional: Allow users to read their clicks for a limited time (e.g., 90 days)
                      // && request.time < resource.data.timestamp + duration.value(90, 'd')
                     ) || isAdmin();
      allow update, delete: if isAdmin();
    }

    // Transactions Collection
    match /transactions/{transactionId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isAdmin(); // Typically created by admin or backend function
      allow update: if isAdmin(); // Status updates, notes etc.
      allow delete: if isAdmin();
    }

    // PayoutRequests Collection
    match /payoutRequests/{requestId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow update: if isAdmin(); // Admins update status, adminNotes etc.
      allow delete: if isAdmin();
    }
  }
}
