
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return isAuthenticated() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user owns the resource (based on a 'userId' field in the resource)
    function isResourceOwner(userIdField) {
      return isAuthenticated() && request.auth.uid == userIdField;
    }

    // Users Collection
    match /users/{userId} {
      allow read: if isResourceOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && request.resource.data.uid == request.auth.uid; // User can create their own profile
      allow update: if
        (isResourceOwner(userId) &&
          request.resource.data.uid == resource.data.uid && // Cannot change UID
          request.resource.data.email == resource.data.email && // Cannot change email via this rule
          request.resource.data.role == resource.data.role && // Cannot change role
          request.resource.data.isDisabled == resource.data.isDisabled && // Cannot change disabled status
          request.resource.data.referralCode == resource.data.referralCode && // Cannot change referral code
          request.resource.data.referralCount == resource.data.referralCount &&
          request.resource.data.referralBonusEarned == resource.data.referralBonusEarned &&
          request.resource.data.pendingCashback == resource.data.pendingCashback &&
          request.resource.data.cashbackBalance == resource.data.cashbackBalance && // Balance updates handled by specific actions
          request.resource.data.lifetimeCashback == resource.data.lifetimeCashback &&
          // Allow update if only payoutDetails or specific allowed fields are changing
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'photoURL', 'payoutDetails', 'updatedAt']) ||
           (request.resource.data.cashbackBalance < resource.data.cashbackBalance && // Allow decrementing balance
            request.resource.data.lastPayoutRequestAt != resource.data.lastPayoutRequestAt && // Must update lastPayoutRequestAt
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['cashbackBalance', 'lastPayoutRequestAt', 'updatedAt', 'payoutDetails']))
          )
        ) || isAdmin(); // Admins can update any field
      allow delete: if false; // Prevent accidental deletion by anyone
    }

    // Stores Collection
    match /stores/{storeId} {
      allow read: if resource.data.isActive == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // Coupons Collection
    match /coupons/{couponId} {
      allow read: if resource.data.isActive == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // Categories Collection
    match /categories/{categoryId} {
      allow read: if resource.data.isActive == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // Banners Collection
    match /banners/{bannerId} {
      allow read: if resource.data.isActive == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // Products Collection
    match /products/{productId} {
      allow read: if resource.data.isActive == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // Clicks Collection
    match /clicks/{clickId} {
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.clickId == clickId; // Ensure clickId in doc matches doc ID
      allow read: if isResourceOwner(resource.data.userId) || isAdmin();
      allow update, delete: if isAdmin();
    }

    // Conversions Collection - Primarily written by Firebase Function (admin privileges)
    match /conversions/{conversionId} {
      allow read: if isAdmin(); // Or if you want users to read their own conversions, add: isResourceOwner(resource.data.userId)
      allow create: if isAdmin(); // Should be created by a trusted backend (Firebase Function)
      allow update, delete: if isAdmin();
    }

    // Transactions Collection
    match /transactions/{transactionId} {
      allow read: if isResourceOwner(resource.data.userId) || isAdmin();
      allow create: if isAdmin(); // Or created by a trusted backend (Firebase Function)
      allow update: if isAdmin(); // Status updates, etc.
      allow delete: if isAdmin();
    }

    // PayoutRequests Collection
    match /payoutRequests/{requestId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read: if isResourceOwner(resource.data.userId) || isAdmin();
      allow update: if isAdmin(); // Admin processes payouts
      allow delete: if isAdmin();
    }
  }
}
