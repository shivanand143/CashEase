
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the requesting user is the owner of the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if the user is an admin
    // Reads the user's profile document to check their role.
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // === User Profiles ===
    match /users/{userId} {
      // Admins can read/write any profile
      // Users can read/write their own profile
      allow read, update, delete: if isAdmin() || isOwner(userId);
      // Allow anyone to create a user profile (e.g., during signup)
      // Restrict fields that can be set on create if needed (e.g., role)
      allow create: if isAuthenticated(); // Anyone authenticated can create their profile initially
      // More granular update rules might be needed in production
      // e.g., prevent users from changing their own role or balance directly
      // allow update: if isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'photoURL', 'updatedAt' /* add other allowed fields */]);
    }

    // === Stores ===
    match /stores/{storeId} {
      // Anyone can read store information
      allow get, list: if true;
      // Only admins can create, update, or delete stores
      allow create, update, delete: if isAdmin();
    }

    // === Coupons ===
    match /coupons/{couponId} {
      // Anyone can read active coupons (consider adding a filter for isActive == true in rules if needed for list)
      allow get, list: if true; // Or: allow list: if true; allow get: if resource.data.isActive == true;
      // Only admins can create, update, or delete coupons
      allow create, update, delete: if isAdmin();
    }

    // === Clicks ===
    match /clicks/{clickId} {
      // Users can create their own click logs
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      // Only admins can read or delete click logs (adjust if users need to see their clicks)
      allow read, delete: if isAdmin();
      // Generally, clicks shouldn't be updated
      allow update: if false;
    }

    // === Transactions ===
    // Transactions are usually created/updated by a backend process (e.g., Firebase Function)
    // triggered by affiliate network webhooks or batch jobs. Direct client creation/update is risky.
    match /transactions/{transactionId} {
      // Users can read their own transactions
      allow get, list: if isAuthenticated() && resource.data.userId == request.auth.uid;
      // Admins can read any transaction
      allow read: if isAdmin(); // Combines get and list for admins
      // Allow backend/admin to create/update transactions
      // To allow functions/admin SDK: check `request.auth.token.firebase.sign_in_provider != 'custom'` maybe?
      // Or rely on Admin SDK bypassing rules.
      // For simplicity now, only admins can write (simulates backend).
      allow create, update, delete: if isAdmin();
    }

    // === Payout Requests ===
    match /payoutRequests/{requestId} {
        // Users can create their own payout requests
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
        // Users can read their own payout requests
        allow get, list: if isOwner(request.resource.data.userId);
        // Admins can read any payout request and update/delete them
        allow read, update, delete: if isAdmin();
        // Prevent users from updating requests after creation (except maybe cancellation if implemented)
        // allow update: if isAdmin() || (isOwner(resource.data.userId) && /* add cancellation logic here */);
    }

  }
}
