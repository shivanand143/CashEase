rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Default deny all reads/writes unless explicitly allowed
    match /{document=**} {
      allow read, write: if false;
    }

    // Users Collection
    // - Authenticated users can read their own profile
    // - Authenticated users can update their own profile (except role)
    // - Admins can read/write any user profile
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow create: if request.auth != null; // Allow creation on signup
      allow update: if request.auth != null &&
                       (request.auth.uid == userId && request.resource.data.role == resource.data.role) || // User can update own profile (but not role)
                       isAdmin(); // Admins can update anything
      allow delete: if isAdmin(); // Only admins can delete users
    }

    // Stores Collection
    // - All authenticated users can read stores
    // - Only admins can create, update, or delete stores
    match /stores/{storeId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin(); // Includes create, update, delete
    }

    // Coupons Collection
    // - All authenticated users can read coupons
    // - Only admins can create, update, or delete coupons
    match /coupons/{couponId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin(); // Includes create, update, delete
    }

    // Transactions Collection
    // - Authenticated users can read their own transactions
    // - Only admins can create, update, or delete transactions (important for balance integrity)
    match /transactions/{transactionId} {
       allow read: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
       allow create, update, delete: if request.auth != null && isAdmin();
    }

    // Payout Requests Collection
    // - Authenticated users can read their own payout requests
    // - Authenticated users can create their own payout requests
    // - Only admins can update (approve/reject) or delete payout requests
    match /payoutRequests/{payoutRequestId} {
        allow read: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid; // User creates own request
        allow update, delete: if request.auth != null && isAdmin(); // Admin manages status
    }

     // Clicks Collection (Tracking)
     // - Authenticated users can create their own click logs
     // - Admins can read click logs (for analytics/debugging)
     match /clicks/{clickId} {
        allow read: if request.auth != null && isAdmin(); // Only admins read click logs directly
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid; // User creates own click log
        // Generally, don't allow update/delete on click logs
        allow update, delete: if false;
     }
  }
}
