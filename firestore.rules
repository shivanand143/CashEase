
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the requesting user is the owner of the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if the requesting user is an admin
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users Collection
    match /users/{userId} {
      // Admins can read/write any user profile
      // Authenticated users can read their own profile
      allow read: if isAdmin() || isOwner(userId);

      // Admins can update any user profile (be cautious with this)
      // Authenticated users can create their own profile during signup
      // Authenticated users can update their own profile (specific fields)
      allow write: if isAdmin();
      allow create: if isOwner(userId); // Allows signup to create the doc
      allow update: if isOwner(userId) &&
                      request.resource.data.uid == userId && // Cannot change UID
                      request.resource.data.email == request.auth.token.email && // Cannot change email via profile update directly (use auth methods)
                      request.resource.data.role == resource.data.role && // User cannot change their own role
                      request.resource.data.keys().hasAll(['uid', 'email', 'displayName', 'photoURL', 'role', 'cashbackBalance', 'pendingCashback', 'lifetimeCashback', 'referralCode', 'referredBy', 'createdAt', 'updatedAt']) && // Ensure all required fields exist
                      request.resource.data.size() == 12; // Ensure no extra fields are added
                      // Add specific field validations if needed (e.g., displayName is string)
                      // Allow updating specific fields like displayName, photoURL, payment details (if added)
    }

    // Stores Collection
    match /stores/{storeId} {
      // Anyone can read store information
      allow read: if true;
      // Only admins can create, update, or delete stores
      allow write: if isAdmin();
    }

    // Coupons Collection
    match /coupons/{couponId} {
      // Anyone can read coupon information
      allow read: if true;
      // Only admins can create, update, or delete coupons
      allow write: if isAdmin();
    }

    // Clicks Collection
    match /clicks/{clickId} {
      // Only authenticated users can create click logs for themselves
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      // Admins can read clicks (for analytics/debugging)
      // Users cannot read/update/delete clicks directly
      allow read: if isAdmin();
      allow update, delete: if false; // Clicks are append-only usually
    }

    // Transactions Collection
    match /transactions/{transactionId} {
      // Admins can read/write any transaction (for manual adjustments/creation)
      // Users can read their own transactions
      allow read: if isAdmin() || (isAuthenticated() && resource.data.userId == request.auth.uid);
      // Only admins should typically write transactions (e.g., via backend process)
      allow write: if isAdmin();
       // Users cannot create/delete transactions directly
      allow create, delete: if false;
    }

    // Payout Requests Collection
    match /payoutRequests/{requestId} {
       // Admins can read/update any payout request
       // Users can read their own payout requests
      allow read: if isAdmin() || (isAuthenticated() && resource.data.userId == request.auth.uid);
       // Users can create their own payout requests
       allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
       // Only admins can update payout requests (approve/reject)
       allow update: if isAdmin();
       // Users/Admins cannot delete payout requests (keep history)
       allow delete: if false;
    }

    // Default deny all other paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
